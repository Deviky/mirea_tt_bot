import re
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import BotCommand
from sqlighter import DBManager
import config as cnfg
from time_table_parses import parse
from storage import StorageService
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=cnfg.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
db = DBManager()
storage = StorageService()
scheduler = AsyncIOScheduler()

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
GROUP_REGEX = re.compile(r"^[–ê-–Ø–∞-—èA-Za-z]{4}-\d{2}-\d{2}$")
TEACHER_REGEX = re.compile(r"^[–ê-–Ø–∞-—èA-Za-z—ë–Å]+ [–ê-–ØA-Z]\.[–ê-–ØA-Z]\.$")

@dp.message(CommandStart())
async def handle_start(message: Message):
    db.add_new_user(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ <b>–≥—Ä—É–ø–ø—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–í–¢-21-01</code>) "
        "–∏–ª–∏ <b>–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–≤–∞–Ω–æ–≤ –ò.–ü.</code>) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    )

def format_schedule_by_days(schedule, for_group=True) -> str:
    days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

    # –í—Ä–µ–º—è –ø–∞—Ä –ø–æ –Ω–æ–º–µ—Ä—É
    couple_times = {
        1: "9:00 - 10:30",
        2: "10:40 - 12:10",
        3: "12:40 - 14:10",
        4: "14:20 - 15:50",
        5: "16:20 - 17:50",
        6: "18:00 - 19:30",
    }

    schedule_by_day = {day: [] for day in days_order}
    for entry in schedule:
        day = entry['day_of_week']
        if day in schedule_by_day:
            schedule_by_day[day].append(entry)

    result_lines = []
    for day in days_order:
        day_entries = schedule_by_day[day]
        if not day_entries:
            continue

        result_lines.append(f"üìÖ <b>{day}</b>:\n")
        result_lines.append("<pre>")

        header = f"{'–ü–∞—Ä–∞':<15}  {'1 –Ω–µ–¥–µ–ª—è':<45}  {'2 –Ω–µ–¥–µ–ª—è':<45}"
        result_lines.append(header)
        result_lines.append("-" * 105)

        couples_nums = sorted(set(e['couple_num'] for e in day_entries))
        for couple_num in couples_nums:
            week1_entries = [e for e in day_entries if e['couple_num'] == couple_num and e['week_num'] == 1]
            week2_entries = [e for e in day_entries if e['couple_num'] == couple_num and e['week_num'] == 2]

            def fmt(e):
                base = f"{e['course_name']}"
                if for_group:
                    base += f", {e['teacher_full_name']}, {e['auditorium']}"
                else:
                    base += f", {e['group_id']}, {e['auditorium']}"
                return base

            w1_text = ", ".join(fmt(e) for e in week1_entries) if week1_entries else "‚Äî"
            w2_text = ", ".join(fmt(e) for e in week2_entries) if week2_entries else "‚Äî"

            def clip_text(text, max_len=45):
                return text if len(text) <= max_len else text[: max_len - 3] + "..."

            w1_text = clip_text(w1_text)
            w2_text = clip_text(w2_text)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –Ω–æ–º–µ—Ä–æ–º
            time_str = couple_times.get(couple_num, "‚Äî")
            pair_str = f"{couple_num} ({time_str})"

            line = f"{pair_str:<15}  {w1_text:<45}  {w2_text:<45}"
            result_lines.append(line)

        result_lines.append("</pre>\n")

    return "\n".join(result_lines)



@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()

    if GROUP_REGEX.match(text):
        schedule = db.get_schedule_by_group(text)
        if schedule:
            response = format_schedule_by_days(schedule, for_group=True)
        else:
            response = f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await message.answer(response)

    elif TEACHER_REGEX.match(text):
        schedule = db.get_schedule_by_teacher(text)
        if schedule:
            response = format_schedule_by_days(schedule, for_group=False)
        else:
            response = f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await message.answer(response)

    else:
        await message.answer(
            "‚ö† –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–í–¢-21-01</code>) "
            "–∏–ª–∏ <b>–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–≤–∞–Ω–æ–≤ –ò.–ü.</code>)"
        )

async def check_updates_and_notify():
    last_update = db.get_last_update()
    s3_update_time = storage.check_and_download_if_updated(last_update)
    if s3_update_time:
        print("üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ó–∞–≥—Ä—É–∂–∞—é...")
        try:
            groups, teachers, time_table_info = parse(cnfg.EXCEL_NAME)
            db.create_or_update_time_table(groups, teachers, time_table_info)
            db.set_last_update(s3_update_time)

            user_ids = db.get_all_user_ids()
            for user_id in user_ids:
                try:
                    await bot.send_message(user_id, "üì¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
async def main():
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–¥–ª—è –º–µ–Ω—é Telegram)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    ])

    scheduler.add_job(check_updates_and_notify, "interval", minutes=1)
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    last_update = db.get_last_update()
    if last_update is None:
        print("üïò –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î. –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        from datetime import timezone
        fake_old_time = datetime(1970, 1, 1, tzinfo=timezone.utc)
        s3_update_time = storage.check_and_download_if_updated(fake_old_time)

        if s3_update_time:
            try:
                groups, teachers, time_table_info = parse(cnfg.EXCEL_NAME)
                db.create_or_update_time_table(groups, teachers, time_table_info)
                db.set_last_update(s3_update_time)
                print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤ –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ S3)
        groups, teachers, time_table_info = parse(cnfg.EXCEL_NAME)
        db.create_or_update_time_table(groups, teachers, time_table_info)

    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    asyncio.run(main())